#!/bin/bash

# shell functions to download and view in various programs

# view a downloaded/local file, pretty printed and syntax highlighted
_fetchview () {
    local FETCH_CMD="$1"
    local VIEW_CMD="$2"
    local TYPE="$3"
    local URL="$4"
    local FULL_VIEW_CMD=$(which ${VIEW_CMD})
    local VIM_CMD=$(which vim)

    if [ $FETCH_CMD = "wget" ]; then
        local WGET_CMD=$(which wget)
        local FULL_FETCH_CMD="${WGET_CMD} -O -"
    elif [ $FETCH_CMD = "cat" ]; then
        local FULL_FETCH_CMD=$(which cat)
    else
        echo "ERROR: unknown fetch command '${FETCH_CMD}'"
        return 1
    fi

    $FULL_FETCH_CMD "$URL" | $FULL_VIEW_CMD \
        | $VIM_CMD --cmd 'let no_plugin_maps = 1' \
        -c 'runtime! macros/less.vim' -c "set filetype=${TYPE}" -
}

# check that all of the commands required to view a file are present on the
# system
_fetchview_check_cmds () {
    local CHECK_CMDS="$@"
    local CHECK_ERROR=0

    for CHECK_CMD in $CHECK_CMDS;
    do
        local WHICH_CMD=$(which ${CHECK_CMD})
        if [ ! -x $WHICH_CMD ]; then
            echo "ERROR: ${CHECK_CMD_NAME} missing/not executable"
            CHECK_ERROR=$(($CHECK_ERROR + 1))
        fi
    done
    if [ $CHECK_ERROR -gt 0 ]; then
        return 1
    fi
}

# check to see that a URL was passed in
_fetchview_url_check () {
    local URL=$1
    local TYPE=$2
    if [ "x$URL" == "x" ]; then
        echo "ERROR: Missing file URL"
        echo "Usage: fetch${TYPE} \"http://example.com/api/request.${TYPE}\""
        echo "(Hint: quote URL to prevent shell from interpreting URL)"
        return 1
    fi
}

# check to see that a filename was passed in
_fetchview_file_check () {
    local URL=$1
    local TYPE=$2
    if [ ! -e "$URL" ]; then
        echo "ERROR: Missing file ${URL} on the local filesystem"
        echo "Usage: less${TYPE} /path/to/file.${TYPE}"
        return 1
    fi
}

# fetch and view a JSON file from the intarwebs
fetchjson () {
    local URL="$1"
    _fetchview_url_check "$URL" "json"
    _fetchview_check_cmds "vim" "wget" "json_xs"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "wget" "json_xs" "json" "$URL"
}

# fetch and view a YAML file from the intarwebs
fetchyaml () {
    local URL="$1"
    _fetchview_url_check "$URL" "yaml"
    _fetchview_check_cmds "vim" "wget" "json_xs"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "wget" "json_xs" "yaml" "$URL"
}

# fetch and view an XML file from the intarwebs
fetchxml () {
    local URL="$1"
    _fetchview_url_check "$URL" "xml"
    _fetchview_check_cmds "vim" "wget" "xml_pp"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "wget" "xml_pp" "xml" "$URL"
}

# fetch a URL, view it in 'xxd'
fetchxxd () {
    local URL="$1"
    _fetchview_url_check "$URL" "xxd"
    _fetchview_check_cmds "vim" "wget" "xxd"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "wget" "xxd" "xxd" "$URL"
}

# view a local JSON file
lessjson () {
    local URL="$1"
    _fetchview_file_check "$URL" "json"
    _fetchview_check_cmds "vim" "cat" "json_xs"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "cat" "json_xs" "json" "$URL"
}

# view a local YAML file
lessyaml () {
    local URL="$1"
    _fetchview_file_check "$URL" "yaml"
    _fetchview_check_cmds "vim" "cat" "json_xs"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "cat" "json_xs" "yaml" "$URL"
}

# view a local XML file
lessxml () {
    local URL="$1"
    _fetchview_file_check "$URL" "xml"
    _fetchview_check_cmds "vim" "cat" "xml_pp"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "cat" "xml_pp" "xml" "$URL"
}

# fetch a local file, view it in 'xxd'
lessxxd () {
    local URL="$1"
    _fetchview_file_check "$URL" "xxd"
    _fetchview_check_cmds "vim" "cat" "xxd"
    # $1 = fetch command, $2 = view command, $3 = file type, $4 = URL
    _fetchview "cat" "xxd" "xxd" "$URL"
}

# run VIM in "less" mode, reading from STDIN
# NOTE: '--cmd' is different than '-c'
vimless () {
    local VIM_CMD=$(which vim)
    $VIM_CMD --cmd 'let no_plugin_maps = 1' -c 'runtime! macros/less.vim' -
}

# run VIM in "less" mode, with syntax highlighting, reading from a file
vless () {
   local VIM_CMD=$(which vim)
   local FILENAME="$1"
   local CALLED_AS=$2

   if [ "x${CALLED_AS}" != "x" ]; then
      FUNC_NAME=$CALLED_AS
   else
      FUNC_NAME=$FUNCNAME
   fi
   if [ "x${FILENAME}" = "x" ]; then
      echo "Usage: ${FUNC_NAME} <filename>"
      return
   fi
   if [ ! -f $FILENAME ]; then
      echo "Error: '${FILENAME}' not found"
      return
   fi
   $VIM_CMD -R -c 'runtime! macros/less.vim' $FILENAME
}
# alias of the above function
vimr () {
   vless "$1" "vimr"
}

# view the output of 'set' in VIM with syntax highlighting
setless () {
    local VIM_CMD=$(which vim)
    set | $VIM_CMD --cmd 'let no_plugin_maps = 1' \
        -c 'runtime! macros/less.vim' -c 'set filetype=sh' -
}

decode_base36 () {
   perl -e 'use Math::Base36 qw(:all); use 5.010;
      my $num = <STDIN>; chomp($num); say decode_base36(uc($num));'
}

encode_base36 () {
   perl -e 'use Math::Base36 qw(:all); use 5.010;
      my $num = <STDIN>; chomp($num); say encode_base36($num);'
}
# vi: set filetype=sh shiftwidth=4 tabstop=4
# конец!
